{"version":3,"file":"lib.min.js","sources":["../src/lib.js"],"sourcesContent":["var questionString = 'Can I help u...'\nvar errorString = 'An error occurred! Please try again later.'\n\nexport const init = (data) => {\n    const blockId = data['blockId']\n    const api_type = data['api_type']\n    const persistConvo = data['persistConvo']\n    const history = data['history']\n    console.log(`Blockid: ${blockId}; history: ${history[0]}`)\n    // Initialize local data storage if necessary\n    // If a thread ID exists for this block, make an API request to get existing messages\n    // if (api_type === 'assistant') {\n    // if (api_type === 'chat') {\n        chatData = localStorage.getItem(\"block_openai_chat_data\")\n        console.log('chatdata[blockid]', chatData[blockId])\n        console.log('chatdatathread', chatData[chatData[blockId]['threadId']])\n        // if (chatData) {\n            // chatData = JSON.parse(chatData)\n\n\n            \n            // // if (chatData[blockId] && chatData[blockId]['threadId'] && persistConvo === \"0\") {\n            //     //fetch(`${M.cfg.wwwroot}/blocks/openai_chat/api/thread.php?thread_id=${chatData[blockId]['threadId']}`)\n            //     fetch(`${M.cfg.wwwroot}/blocks/openai_chat/api/thread.php?thread_id=1`)\n            //     .then(response => response.json())\n            //     .then(data => {\n            //         console.log(\"data: \", data)\n            //         for (let message of data) {\n            //             addToChatLog(message.role === 'user' ? 'user' : 'bot', message.message)\n            //         }\n            //     })\n            //     // Some sort of error in the API call. Probably the thread no longer exists, so lets reset it\n            //     .catch(error => {\n            //         chatData[blockId] = {}\n            //         localStorage.setItem(\"block_openai_chat_data\", JSON.stringify(chatData));\n            //     })\n            // The block ID doesn't exist in the chat data object, so let's create it\n            // } else {\n            //     chatData[blockId] = {}\n            // }\n        // We don't even have a chat data object, so we'll create one\n        // } else {\n            //chatData = {[blockId]: {}}\n        \n        for (let message of history) {\n            console.log(\"His: \", message)\n            addToChatLog(message.send_by === 1 ? 'user' : 'bot', message.content)\n        }\n        // }\n        //localStorage.setItem(\"block_openai_chat_data\", JSON.stringify(chatData));\n    // }\n\n    // Prevent sidebar from closing when osk pops up (hack for MDL-77957)\n    window.addEventListener('resize', event => {\n        event.stopImmediatePropagation();\n    }, true);\n\n    document.querySelector('#openai_input').addEventListener('keyup', e => {\n        if (e.which === 13 && e.target.value !== \"\") {\n            addToChatLog('user', e.target.value)\n            createCompletion(e.target.value, blockId, api_type)\n            e.target.value = ''\n        }\n    })\n    document.querySelector('.block_openai_chat #go').addEventListener('click', e => {\n        const input = document.querySelector('#openai_input')\n        if (input.value !== \"\") {\n            addToChatLog('user', input.value)\n            createCompletion(input.value, blockId, api_type)\n            input.value = ''\n        }\n    })\n\n    document.querySelector('.block_openai_chat #refresh').addEventListener('click', e => {\n        clearHistory(blockId)\n    })\n\n    require(['core/str'], function(str) {\n        var strings = [\n            {\n                key: 'askaquestion',\n                component: 'block_openai_chat'\n            },\n            {\n                key: 'erroroccurred',\n                component: 'block_openai_chat'\n            },\n        ];\n        str.get_strings(strings).then((results) => {\n            questionString = results[0];\n            errorString = results[1];\n        });\n    });\n}\n\n/**\n * Add a message to the chat UI\n * @param {string} type Which side of the UI the message should be on. Can be \"user\" or \"bot\"\n * @param {string} message The text of the message to add\n */\nconst addToChatLog = (type, message) => {\n    let messageContainer = document.querySelector('#openai_chat_log')\n    \n    const messageElem = document.createElement('div')\n    messageElem.classList.add('openai_message')\n    for (let className of type.split(' ')) {\n        messageElem.classList.add(className)\n    }\n\n    const messageText = document.createElement('span')\n    messageText.innerHTML = message\n    messageElem.append(messageText)\n\n    messageContainer.append(messageElem)\n    if (messageText.offsetWidth) {\n        messageElem.style.width = (messageText.offsetWidth + 40) + \"px\"\n    }\n    messageContainer.scrollTop = messageContainer.scrollHeight\n}\n\n/**\n * Clears the thread ID from local storage and removes the messages from the UI in order to refresh the chat\n */\nconst clearHistory = (blockId) => {\n    chatData = localStorage.getItem(\"block_openai_chat_data\")\n    if (chatData) {\n        chatData = JSON.parse(chatData)\n        if (chatData[blockId]) {\n            chatData[blockId] = {}\n            localStorage.setItem(\"block_openai_chat_data\", JSON.stringify(chatData));\n        }\n    }\n    document.querySelector('#openai_chat_log').innerHTML = \"\"\n}\n\n/**\n * Makes an API request to get a completion from GPT-3, and adds it to the chat log\n * @param {string} message The text to get a completion for\n * @param {int} blockId The ID of the block this message is being sent from -- used to override settings if necessary\n * @param {string} api_type \"assistant\" | \"chat\" The type of API to use\n */\nconst createCompletion = (message, blockId, api_type) => {\n    let threadId = null\n    let chatData\n\n    // If the type is assistant, attempt to fetch a thread ID\n    // if (api_type === 'assistant') {\n    //     chatData = localStorage.getItem(\"block_openai_chat_data\")\n    //     if (chatData) {\n    //         chatData = JSON.parse(chatData)\n    //         if (chatData[blockId]) {\n    //             threadId = chatData[blockId]['threadId'] || null\n    //         }\n    //     } else {\n    //         // create the chat data item if necessary\n    //         chatData = {[blockId]: {}}\n    //     }\n    // }  \n\n    const history = buildTranscript()\n    console.log(\"buitranscript: \", history)\n\n    document.querySelector('.block_openai_chat #control_bar').classList.add('disabled')\n    document.querySelector('#openai_input').classList.remove('error')\n    document.querySelector('#openai_input').placeholder = questionString\n    document.querySelector('#openai_input').blur()\n    addToChatLog('bot loading', '...');\n    fetch(`${M.cfg.wwwroot}/blocks/openai_chat/api/completion.php`, {\n        method: 'POST',\n        body: JSON.stringify({\n            message: message,\n            history: history,\n            blockId: blockId,\n            threadId: threadId\n        })\n    })\n    .then(response => {\n        let messageContainer = document.querySelector('#openai_chat_log')\n        messageContainer.removeChild(messageContainer.lastElementChild)\n        document.querySelector('.block_openai_chat #control_bar').classList.remove('disabled')\n\n        if (!response.ok) {\n            throw Error(response.statusText)\n        } else {\n            return response.json()\n        }\n    })\n    .then(data => {\n        try {\n            addToChatLog('bot', data.message)\n            if (data.thread_id) {\n                chatData[blockId]['threadId'] = data.thread_id\n                localStorage.setItem(\"block_openai_chat_data\", JSON.stringify(chatData));\n            }\n        } catch (error) {\n            console.log(error)\n            addToChatLog('bot', data.error.message)\n        }\n        document.querySelector('#openai_input').focus()\n    })\n    .catch(error => {\n        console.log(error)\n        document.querySelector('#openai_input').classList.add('error')\n        document.querySelector('#openai_input').placeholder = errorString\n    })\n\n    // fetch(`${M.cfg.wwwroot}/blocks/openai_chat/api/completion.php`, {\n    //     method: 'POST',\n    //     body: JSON.stringify({\n    //         message: message,\n    //         history: history,\n    //         blockId: blockId,\n    //         threadId: threadId\n    //     })\n    // })\n    // .then(response => {\n    //     // Check if the response is successful\n    //     console.log('res:', response)\n    //     if (!response.ok) {\n    //         throw new Error(`HTTP error! Status: ${response.status}`);\n    //     }\n    //     // Convert response to text\n    //     return response.text();\n    // })\n    // .then(responseText => {\n    //     console.log('res_text:', responseText)\n    //     // Trim the response string to remove leading/trailing whitespace\n    //     const trimmedResponse = responseText.trim();\n    //     try {\n    //         // Parse the trimmed response as JSON\n    //         const data = JSON.parse(trimmedResponse);\n    //         // Handle the parsed JSON data\n    //         addToChatLog('bot', data.message);\n    //         if (data.thread_id) {\n    //             chatData[blockId]['threadId'] = data.thread_id;\n    //             localStorage.setItem(\"block_openai_chat_data\", JSON.stringify(chatData));\n    //         }\n    //     } catch (error) {\n    //         // Handle JSON parsing error\n    //         console.error('Error parsing JSON:', error);\n    //         addToChatLog('bot', 'Error parsing JSON response');\n    //     }\n    //     document.querySelector('#openai_input').focus();\n    // })\n    // .catch(error => {\n    //     // Handle fetch error\n    //     console.error('Fetch error:', error);\n    //     document.querySelector('#openai_input').classList.add('error');\n    //     document.querySelector('#openai_input').placeholder = errorString;\n    // });\n    \n}\n\n/**\n * Using the existing messages in the chat history, create a string that can be used to aid completion\n * @return {JSONObject} A transcript of the conversation up to this point\n */\nconst buildTranscript = () => {\n    let transcript = []\n    document.querySelectorAll('.openai_message').forEach((message, index) => {\n        if (index === document.querySelectorAll('.openai_message').length - 1) {\n            return\n        }\n\n        let user = userName\n        if (message.classList.contains('bot')) {\n            user = assistantName\n        }\n        transcript.push({\"user\": user, \"message\": message.innerText})\n    })\n\n    return transcript\n}\n"],"names":["questionString","errorString","data","blockId","api_type","history","console","log","chatData","localStorage","getItem","message","addToChatLog","send_by","content","window","addEventListener","event","stopImmediatePropagation","document","querySelector","e","which","target","value","createCompletion","input","clearHistory","require","str","get_strings","key","component","then","results","type","messageContainer","messageElem","createElement","classList","add","className","split","messageText","innerHTML","append","offsetWidth","style","width","scrollTop","scrollHeight","JSON","parse","setItem","stringify","buildTranscript","remove","placeholder","blur","fetch","M","cfg","wwwroot","method","body","threadId","response","removeChild","lastElementChild","ok","json","Error","statusText","thread_id","error","focus","catch","transcript","querySelectorAll","forEach","index","length","user","userName","contains","assistantName","push","innerText"],"mappings":"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"}