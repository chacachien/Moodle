{"version":3,"file":"lib.min.js","sources":["../src/lib.js"],"sourcesContent":["var questionString = 'Can I help u...'\nvar errorString = 'An error occurred! Please try again later.'\nimport * as Modal from 'core/modal_factory';\nimport * as ModalEvents from 'core/modal_events';\nexport const init = (data) => {\n    const blockId = data['blockId']\n    const api_type = data['api_type']\n    const persistConvo = data['persistConvo']\n    const history = data['history']\n    console.log(`Blockid: ${blockId}; history: ${history[0]}`)\n    for (let message of history) {\n        console.log(\"His: \", message)\n        addToChatLog(message.role === 1 ? 'user' : 'bot', message.content)\n    }\n\n    // Prevent sidebar from closing when osk pops up (hack for MDL-77957)\n    window.addEventListener('resize', event => {\n        event.stopImmediatePropagation();\n    }, true);\n\n    document.querySelector('#openai_input').addEventListener('keyup', e => {\n        if (e.which === 13 && e.target.value !== \"\") {\n            addToChatLog('user', e.target.value)\n            createCompletion(e.target.value, blockId, api_type)\n            e.target.value = ''\n        }\n    })\n    document.querySelector('.block_openai_chat #go').addEventListener('click', e => {\n        const input = document.querySelector('#openai_input')\n        if (input.value !== \"\") {\n            addToChatLog('user', input.value)\n            createCompletion(input.value, blockId, api_type)\n            input.value = ''\n        }\n    })\n\n    document.querySelector('.block_openai_chat #refresh').addEventListener('click', e => {\n        // window.alert(\"Hello world!\")\n        // clearHistory(blockId)\n        e.preventDefault();\n        Modal.create({\n        type: Modal.types.SAVE_CANCEL,\n        title: 'Confirmation before refresh',\n        body: '<p>Are you sure before you choose to refresh this chat?</p>',\n        }).then(modal=>{\n            modal.show();\n            modal.getRoot().on(ModalEvents.save, () => {\n                console.log(\"Click save\")\n                clearHistory(blockId);\n                console.log(\"save successful!\")\n                modal.hide();\n            });\n            modal.getRoot().on(ModalEvents.hidden, function() {\n                modal.destroy();\n            });\n        }).catch(Notification.exception);\n\n    })\n\n    require(['core/str'], function(str) {\n        var strings = [\n            {\n                key: 'askaquestion',\n                component: 'block_openai_chat'\n            },\n            {\n                key: 'erroroccurred',\n                component: 'block_openai_chat'\n            },\n        ];\n        str.get_strings(strings).then((results) => {\n            questionString = results[0];\n            errorString = results[1];\n        });\n    });\n}\n\n/**\n * Add a message to the chat UI\n * @param {string} type Which side of the UI the message should be on. Can be \"user\" or \"bot\"\n * @param {string} message The text of the message to add\n */\nconst addToChatLog = (type, message) => {\n    let messageContainer = document.querySelector('#openai_chat_log')\n    \n    const messageElem = document.createElement('div')\n    messageElem.classList.add('openai_message')\n    for (let className of type.split(' ')) {\n        messageElem.classList.add(className)\n    }\n\n    const messageText = document.createElement('span')\n    messageText.innerHTML = message\n    messageElem.append(messageText)\n\n    messageContainer.append(messageElem)\n    if (messageText.offsetWidth) {\n        messageElem.style.width = (messageText.offsetWidth + 40) + \"px\"\n    }\n    messageContainer.scrollTop = messageContainer.scrollHeight\n}\n\n/**\n * Clears the thread ID from local storage and removes the messages from the UI in order to refresh the chat\n */\nconst clearHistory = (blockId) => {\n    // chatData = localStorage.getItem(\"block_openai_chat_data\")\n    // if (chatData) {\n    //     chatData = JSON.parse(chatData)\n    //     if (chatData[blockId]) {\n    //         chatData[blockId] = {}\n    //         localStorage.setItem(\"block_openai_chat_data\", JSON.stringify(chatData));\n    //     }\n    // }\n    \n    fetch(`${M.cfg.wwwroot}/blocks/openai_chat/api/completion.php?block_id=${blockId}`, {\n        method: 'DELETE',       \n    })\n    .then(response => {\n        console.log('clear his: ', response)\n        try{\n            if (!response.ok) {\n                throw Error(response.statusText)\n            } else {\n                document.querySelector('#openai_chat_log').innerHTML = \"\"\n                return\n            }\n        } catch{\n            console.log(error)\n            //addToChatLog('bot', data.error.message)\n        }\n    })\n    .catch(error => {\n        console.log(error)\n        document.querySelector('#openai_input').classList.add('error')\n        document.querySelector('#openai_input').placeholder = errorString\n    })\n}\n\n/**\n * Makes an API request to get a completion from GPT-3, and adds it to the chat log\n * @param {string} message The text to get a completion for\n * @param {int} blockId The ID of the block this message is being sent from -- used to override settings if necessary\n * @param {string} api_type \"assistant\" | \"chat\" The type of API to use\n */\nconst createCompletion = (message, blockId, api_type) => {\n    let threadId = null\n    let chatData\n\n    // const history = buildTranscript()\n    // console.log(\"buitranscript: \", history)\n\n    document.querySelector('.block_openai_chat #control_bar').classList.add('disabled')\n    document.querySelector('#openai_input').classList.remove('error')\n    document.querySelector('#openai_input').placeholder = questionString\n    document.querySelector('#openai_input').blur()\n    addToChatLog('bot loading', '...');\n    fetch(`${M.cfg.wwwroot}/blocks/openai_chat/api/completion.php`, {\n        method: 'POST',\n        body: JSON.stringify({\n            message: message,\n            // history: history,\n            blockId: blockId,\n            // threadId: threadId\n        })\n    })\n    .then(response => {\n        let messageContainer = document.querySelector('#openai_chat_log')\n        messageContainer.removeChild(messageContainer.lastElementChild)\n        document.querySelector('.block_openai_chat #control_bar').classList.remove('disabled')\n        console.log(\"response: \",response)\n        if (!response.ok) {\n            throw Error(response.statusText)\n        } else {\n            return response.json()\n        }\n    })\n    .then(data => {\n        console.log(\"data: \", data)\n        try {\n            addToChatLog('bot', data.message)\n            \n        } catch (error) {\n            console.log(error)\n            //addToChatLog('bot', data.error.message)\n        }\n        document.querySelector('#openai_input').focus()\n    })\n    .catch(error => {\n        console.log(\"ERR: \", error)\n        document.querySelector('#openai_input').classList.add('error')\n        document.querySelector('#openai_input').placeholder = errorString\n    })\n    \n}\n\n/**\n * Using the existing messages in the chat history, create a string that can be used to aid completion\n * @return {JSONObject} A transcript of the conversation up to this point\n */\nconst buildTranscript = () => {\n    let transcript = []\n    document.querySelectorAll('.openai_message').forEach((message, index) => {\n        if (index === document.querySelectorAll('.openai_message').length - 1) {\n            return\n        }\n\n        let user = userName\n        if (message.classList.contains('bot')) {\n            user = assistantName\n        }\n        transcript.push({\"user\": user, \"message\": message.innerText})\n    })\n    return transcript\n}\n"],"names":["questionString","errorString","data","blockId","api_type","history","console","log","message","addToChatLog","role","content","window","addEventListener","event","stopImmediatePropagation","document","querySelector","e","which","target","value","createCompletion","input","preventDefault","Modal","create","type","types","SAVE_CANCEL","title","body","then","modal","show","getRoot","on","ModalEvents","save","clearHistory","hide","hidden","destroy","catch","Notification","exception","require","str","get_strings","key","component","results","messageContainer","messageElem","createElement","classList","add","className","split","messageText","innerHTML","append","offsetWidth","style","width","scrollTop","scrollHeight","fetch","M","cfg","wwwroot","method","response","ok","Error","statusText","error","placeholder","remove","blur","JSON","stringify","removeChild","lastElementChild","json","focus"],"mappings":"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"}